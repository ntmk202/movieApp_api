# Generated by Django 4.2.7 on 2023-12-21 08:36

import api.models
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django_jsonform.models.fields
import embed_video.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('theater', '0001_initial'),
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('fullname', models.CharField(max_length=50)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('number', models.CharField(max_length=15, validators=[django.core.validators.RegexValidator(message='Number only', regex='^[0-9]+$')])),
                ('dateBirth', models.DateField(null=True)),
                ('address', models.TextField()),
                ('profile_pic', models.ImageField(default='mediaMovie/user.jpg', null=True, upload_to='media/profile_pics')),
                ('lastLogin', models.DateTimeField(auto_now_add=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('is_superuser', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
            },
            managers=[
                ('objects', api.models.CustomUserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Actor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30, unique=True)),
                ('image', models.ImageField(default='media/user.jpg', upload_to='mediaMovie/actors/')),
                ('character', models.CharField(max_length=100, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Movie',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200, unique=True)),
                ('genre', models.CharField(max_length=200)),
                ('trailer', embed_video.fields.EmbedVideoField()),
                ('director', models.CharField(max_length=200, null=True)),
                ('durationInMinutes', models.PositiveSmallIntegerField()),
                ('release_date', models.DateField()),
                ('tagline', models.CharField(max_length=300, null=True)),
                ('description', models.TextField()),
                ('posterImage', models.ImageField(default='media/user.jpg', upload_to='mediaMovie/posters/')),
                ('views', models.PositiveIntegerField(default=0)),
                ('rating', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(5)])),
                ('isAvailable', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now_add=True)),
                ('actors', models.ManyToManyField(to='api.actor')),
            ],
        ),
        migrations.CreateModel(
            name='Showtimes',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('showtime', models.DateField()),
                ('time', django_jsonform.models.fields.JSONField(default=list)),
                ('available', models.BooleanField(default=True)),
                ('movie', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.movie')),
                ('roomNumber', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='theater.room')),
            ],
        ),
        migrations.CreateModel(
            name='Evulation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rate', models.IntegerField(help_text='Rate from 1 to 5', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('comment', models.TextField(max_length=400)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now_add=True)),
                ('movie', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.movie')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Booking',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fullname', models.CharField(blank=True, max_length=50, null=True)),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('number', models.CharField(blank=True, max_length=15, null=True, validators=[django.core.validators.RegexValidator(message='Number only', regex='^[0-9]+$')])),
                ('bookedAt', models.DateTimeField(auto_now_add=True)),
                ('totalPrice', models.DecimalField(decimal_places=2, max_digits=8)),
                ('expiresIn', models.IntegerField(default='210')),
                ('paypal_payment_id', models.CharField(blank=True, max_length=50, null=True)),
                ('status', models.CharField(choices=[('Pending', 'Pending'), ('Successful', 'Successful'), ('Failed', 'Failed')], default='Pending', max_length=30)),
                ('seat', models.ManyToManyField(to='theater.seat')),
                ('showtime', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.showtimes')),
                ('snacks', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='theater.popconsanddrinks')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('voucher', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='theater.voucher')),
            ],
        ),
    ]
